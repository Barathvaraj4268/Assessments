# -*- coding: utf-8 -*-
"""LVADSUSR75_barathvaraj_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11pzXmKyDfPF2eGZzfRjKanZ1VYvFzMW9
"""

import pandas as pd
import numpy as np

df=pd.read_csv("/content/drive/MyDrive/pred_analysis_datasets/assess2/winequality-red.csv")
df

df.isna().sum()

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(strategy='mean')
imp_vals=imputer.fit_transform(df[['fixed acidity','volatile acidity','citric acid','residual sugar','sulphates']])
df[['fixed acidity','volatile acidity','citric acid','residual sugar','sulphates']]=imp_vals
# df[['fixed acidity','volatile acidity','citric acid','residual sugar','sulphates']].fillna(np.mean(df[['fixed acidity','volatile acidity','citric acid','residual sugar','sulphates']]),inplace=True)
df['chlorides'].fillna(method='ffill',inplace=True)
df['free sulfur dioxide'].fillna(df['chlorides'].median(),inplace=True)
df.isna().sum()

import matplotlib.pyplot as plt
import seaborn as sns

sns.boxplot(df)
plt.show()

from sklearn.ensemble import IsolationForest
iso=IsolationForest(contamination=0.05)
outliers=iso.fit_predict(df)
df_outliers=df.iloc[np.where(outliers==-1)]
df.drop(df_outliers.index,inplace=True)
df

#No transformation required
#No encoding required

df.drop_duplicates(inplace=True)
df.corr()
#There is no string correlation between columns so no need to drop

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score

X=df.drop(['quality'],axis=1)
y=df['quality']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25, random_state=42)

rf=RandomForestClassifier()
rf.fit(X_train,y_train)
y_pred_rf=rf.predict(X_test)

accuracyScore=accuracy_score(y_test,y_pred_rf)
precisionScore=precision_score(y_test,y_pred_rf,average='weighted')
recallScore=recall_score(y_test,y_pred_rf,average='weighted')

print(accuracyScore)
print(precisionScore)
print(recallScore)
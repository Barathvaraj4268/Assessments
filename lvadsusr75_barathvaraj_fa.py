# -*- coding: utf-8 -*-
"""LVADSUSR75-Barathvaraj-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jV4vwB0ytbrjuluTEU-7WTAai1JB31dr
"""

#1
import pandas as pd
df=pd.read_excel("/content/drive/MyDrive/assess_datasets/Walmart_Dataset Python_Final_Assessment.xsl")
print("--------Information of columns--------")
print(df.info())
print("--------statistical description of columns--------")
print(df.describe())
print("--------List of columns--------")
print(df.columns)
print("--------Shape of dataframe(No. of rows,No. of columns)--------")
print(df.shape)
print("--------Number of Null values in each column--------")
print(df.isna().sum())

#2
null_vals=df.isna().sum()
print(null_vals)
#No null values
df.fillna(0,inplace=True)
duplicated_values=df.duplicated().sum()
print(duplicated_values)
#No duplicated values

#3
descriptive_statistics=df.describe()
print(descriptive_statistics)
mean_3=descriptive_statistics.loc['mean']
median_3=df[['Sales','Quantity','Profit']].median()
mode_3=df[['Sales','Quantity','Profit']].mode()
range_3=descriptive_statistics.loc['min'],descriptive_statistics.loc['max']
variance_3=df[['Sales','Quantity','Profit']].var()
std_3=descriptive_statistics.loc['std']

print(descriptive_statistics)
print("Mean: ",mean_3)
print("Median: ",median_3)
print("Mode: ",mode_3)
print("Range: ",range_3)
print("Mean: ",mean_3)
print("Standard Deviation: ",std_3)

#4
import matplotlib.pyplot as plt
import seaborn as sns
sns.lineplot(data=df,x='Quantity',y='Sales')
sns.lineplot(data=df,x='Quantity',y='Profit')
sns.barplot(data=df,x='Category',y='Sales')

def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Order Date']
  ys = series['Sales']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df.sort_values('Order Date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Order Date')
_ = plt.ylabel('Sales')

sns.pairplot(df)
plt.show()

#5
correlations_5=df.corr()
sls_quan=correlations_5.loc['Sales','Quantity']
sls_profit=correlations_5.loc['Sales','Profit']
quan_profit=correlations_5.loc['Quantity','Profit']
print("Correlation between Sales and Quantity = ",sls_quan)
print("Correlation between Sales and Profit = ",sls_profit)
print("Correlation between Quantity and Profit = ",quan_profit)
print('There is strong correlation between Sales and Profit')
print('There is weak correlation between quantity and profit')

#6
iqr_sales=descriptive_statistics.loc['75%','Sales']-descriptive_statistics.loc['25%','Sales']
iqr_quantity=descriptive_statistics.loc['75%','Quantity']-descriptive_statistics.loc['25%','Quantity']
iqr_profit=descriptive_statistics.loc['75%','Profit']-descriptive_statistics.loc['25%','Profit']

lower_whisker_sales=descriptive_statistics.loc['25%','Sales']-(iqr_sales*1.5)
upper_whisker_sales=descriptive_statistics.loc['75%','Sales']+(iqr_sales*1.5)

lower_whisker_quantity=descriptive_statistics.loc['25%','Quantity']-(iqr_quantity*1.5)
upper_whisker_quantity=descriptive_statistics.loc['75%','Quantity']+(iqr_quantity*1.5)

lower_whisker_profit=descriptive_statistics.loc['25%','Profit']-(iqr_profit*1.5)
upper_whisker_profit=descriptive_statistics.loc['75%','Profit']+(iqr_profit*1.5)

outliers_sales=df[(df['Sales']<lower_whisker_sales) & (df['Sales']>upper_whisker_sales)]
outliers_quantity=df[(df['Quantity']<lower_whisker_quantity) & (df['Quantity']>upper_whisker_quantity)]
outliers_profit=df[(df['Profit']<lower_whisker_profit) & (df['Profit']>upper_whisker_profit)]

print(outliers_sales,outliers_quantity,outliers_profit)
sns.set(rc={'figure.figsize':(12,7)})
sns.boxplot(data=df[['Sales','Profit','Quantity']])
plt.show()
print('No outliers are present')

#7
print("Trend Analysis)
df[['Order Date','Sales','Profit']]
sns.scatterplot(data=df,x='Order Date',y='Sales',label="Sales")
sns.scatterplot(data=df,x='Order Date',y='Profit', label="Profit")
plt.title("Graph of order date vs sales and profit")


sns.lineplot(data=df,x='Order Date',y='Sales', hue='Category')
plt.title("Graph of order date vs sales for each product")
sns.set(rc={'figure.figsize':(40,10)})
plt.show()
print('Copiers have shown more growth')

print("Customer Analysis")
top_5_cus=df.groupby('Order ID').aggregate({'Order ID': 'count','Sales':'sum'})
top_5_cus.sort_values(by=top_5_cus.loc[:,'Order ID':'Sales'],ascending=False,inplace=True,ignore_index=True)
top_5_cus=top_5_cus.head()
print(top_5_cus)

avg_time_min=df.groupby('Order ID').aggregate({'Order ID':'count','Order Date':'min'})
avg_time_max=df.groupby('Order ID').aggregate({'Order ID':'count','Order Date':'max'})
avg_time_cus=(avg_time_min.loc[:,'Order Date']-avg_time_max.loc[:,'Order Date'])/avg_time_min.loc[:,'Order ID']
print("Average time between orders for each customer: ", avg_time_cus)

print("Comprehensive Analysis")
sns.barplot(data=df,x='Category',y='Sales')
plt.title("Category vs Sales")
plt.show()
print('Copiers have in sold for large amounts so copiers can be bought more in quantity and can be promoted followed by machines')

sns.scatterplot(data=df,x='Sales',y='Profit',size='Geography',size_order=df[['Geography','Sales','Quantity']].sort_values(by=['Sales','Quantity'],ascending=False)['Geography'])
plt.show()
plt.title("Sales vs Profit over Geography")
print("From the graph we can infer that Places like 1.Cheyenne,Wyoming || 2.San Gabriel,California || 3.Burbank,California are top 3 major areas where sales and profit are high. So these areas can be targeted")

sns.scatterplot(data=df,x='Quantity',y='Sales',size='EmailID',size_order=df[['EmailID','Sales','Quantity']].sort_values(by=['Sales','Quantity'],ascending=False)['EmailID'])
plt.show()
print("From the graph we can observe that customers with email id StefanieHolloman@gmail.com, MitchWillingham@gmail.com, CharlesMcCrossin@gmail.com, LindsayCastell@gmail.com are big customers who were responsible for huge sales and can be considered high value customers")
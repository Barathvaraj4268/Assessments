# -*- coding: utf-8 -*-
"""LVADSUSR75_barathvaraj_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZiUcRPId_1mwR7tfjcA2gLiOhaqJQin_
"""

#1
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv("/content/drive/MyDrive/pred_analysis_datasets/expenses.csv")
print(df.isna().sum())

sns.boxplot(df[['age','bmi','children']])
plt.show()
iso=IsolationForest(contamination=0.1)
outliers=iso.fit_predict([df['bmi']])
print(outliers)
print(df.iloc[np.where(outliers==-1)])

#There does not seems to be any missing values or major outlier in the data

#2
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

transformed_sex=le.fit_transform(df['sex'])
values_sex=dict(zip(le.classes_,le.transform(le.classes_)))

transformed_smoker=le.fit_transform(df['smoker'])
values_smoker=dict(zip(le.classes_,le.transform(le.classes_)))

transformed_region=le.fit_transform(df['region'])
values_region=dict(zip(le.classes_,le.transform(le.classes_)))

#sex => female=0 male=1
#smoker => no=0 yes=1
#region => northeast=0 northwest: 1, southeast: 2, southwest: 3

df['sex']=transformed_sex
df['smoker']=transformed_smoker
df['region']=transformed_region
df[['sex','smoker','region']]=df[['sex','smoker','region']].astype('category')
df

#3
correlation_matix=df.corr()
print(df.corr())

#since the correlation between children and charges is very less it can be removed
df.drop(['children'],axis=1,inplace=True)
print(df[df.duplicated()])
df

#4
from sklearn.model_selection import train_test_split
X=df.drop(['charges'],axis=1)
y=df['charges']
X_train,X_test,y_train,y_test=train_test_split(X, y, test_size=0.25,random_state=42)

#5
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
lr=LinearRegression()
lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)

accuracyScore=lr.score(X_test,y_test)
mse=mean_squared_error(y_pred,y_test)
rmse=np.sqrt(mse)

print("Accuracy Score = ",accuracyScore)
print("Mean Squared Error = ",mse)
print("Root mean squared error = ",rmse)